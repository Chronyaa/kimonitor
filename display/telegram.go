package display

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/Chronyaa/kimonitor/util"
)

// NewTelegramRobotDefault 创建一个机器人（以token和group_id创建）
func NewTelegramRobotDefault(token, group string) *TelegramRobot {
	return NewTelegramRobot(token, group, ParseModeDefault)
}

// NewTelegramRobot 创建一个机器人（以token，group_id和mode创建）
func NewTelegramRobot(token, group string, mode ParseMode) *TelegramRobot {
	if mode == ParseModeHTML {
		return &TelegramRobot{fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", token), fmt.Sprintf("chat_id=%s&parse_mode=HTML&text=", group)}
	}
	if mode == ParseModeMarkDown {
		return &TelegramRobot{fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", token), fmt.Sprintf("chat_id=%s&parse_mode=MarkDown&text=", group)}
	}
	return &TelegramRobot{fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", token), fmt.Sprintf("chat_id=%s&text=", group)}
}

// Write 向TelegramRobot写入信息
func (t *TelegramRobot) Write(buf []byte) (ret int, err error) {
	defer util.Recover()
	ret = -1
	client := &http.Client{}
	buf = append([]byte(t.BodyPrefix), buf...)
	req, err := http.NewRequest("GET", t.APIAddress, bytes.NewReader(buf))
	util.Error.Returnln(err, "Create request failed.", t.APIAddress, err)
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	resp, err := client.Do(req)
	util.Error.Returnln(err, "Call telegram API failed.", err)
	b, err := ioutil.ReadAll(resp.Body)
	util.Error.Returnln(err, "Read all failed.", err)
	var j RobotResponse
	err = json.Unmarshal(b, &j)
	util.Error.Returnln(err, "Parse json error. Page:\n", string(b))
	util.Error.Assertln(j.Ok, "Get a error response: Response:\n", string(b))
	return len(buf), nil
}

// Generated by https://quicktype.io

// RobotResponse autogen
type RobotResponse struct {
	Ok     bool   `json:"ok"`
	Result Result `json:"result"`
}

// Result autogen
type Result struct {
	MessageID int64  `json:"message_id"`
	From      From   `json:"from"`
	Chat      Chat   `json:"chat"`
	Date      int64  `json:"date"`
	Text      string `json:"text"`
}

// Chat autogen
type Chat struct {
	ID                          int64  `json:"id"`
	Title                       string `json:"title"`
	Type                        string `json:"type"`
	AllMembersAreAdministrators bool   `json:"all_members_are_administrators"`
}

// From autogen
type From struct {
	ID        int64  `json:"id"`
	IsBot     bool   `json:"is_bot"`
	FirstName string `json:"first_name"`
	Username  string `json:"username"`
}

// TelegramRobot autogen
type TelegramRobot struct {
	APIAddress string
	BodyPrefix string
}

// ParseMode autogen
type ParseMode int

const (
	// ParseModeDefault 默认解析模式
	ParseModeDefault = 1
	// ParseModeMarkDown MarkDown解析模式
	ParseModeMarkDown = 2
	// ParseModeHTML HTML解析模式
	ParseModeHTML = 3
)
